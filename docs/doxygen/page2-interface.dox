/**
@page Interface Running NonAdMD
NonAdMD uses 7 major commands to interface with the generic subsystem these are titled: NEW, KILL, UPDATE, RESAMPLE, DISPLAY, SAVE, and CHECK. All these commands are called with a similar FORTRAN syntax\n
\n
call COMMAND(generic_subsystem,[options])\n
\n
 where 'COMMAND' is one of the 7 commands above, 'generic_subsystem' is the name of a generic subsystem (types qs, cs, or cp), and 'options' are ,you guessed it, some optional paramters listed below. For convenience we will refer to generic subsystems as GS from now on. With that said, let look at each of these commands.\n
\section New New
 Creates a GS and tells the GS to behave like a particular derived type. For example the command:\n 
\n
    call New(cs,type='harmonicbath')\n
\n
will prepare the generic classical subsystem (cs) in a form that will cause it to behave like a bath of harmonic oscillators. 'harmonicbath' is a name of a derived classical subsystem type, more on derived subsystems later. One can also prepare the GS from a previously saved file containing the derived subsystem like so:\n
\n
     call New(cs,file='a_harmonicbath_file')\n
\n
The same format applies for a generic quantum subsystem (qs), however, when initiating a generic coupling term (cp) the user must also provide the generic quantum and classical subsystems which are to be linked like so:\n
\n
     call New(cp,qs,cs,type='derived_coupling_type')\n
\n
The quantum and classical GSs must also be provided when initiating from a file.\n
\n
    call New(cp,qs,cs,file='a_derived_coupling_file')\n
\n
Normally the compiler assumes that the second entry (qs) is the generic quantum subsystem and the third (cs) is the generic classical subsystem but you can explicitly define these two like we have for the 'file' and 'type' parameters like so:\n
\n
    call New(cp,qs=myqs,cs=mycs,file='a_derived_coupling_file')\n
or\n
    call New(cp,cs=mycs,qs=myqs,file='a_derived_coupling_file')\n
or even\n
    call New(cp,file='a_derived_coupling_file',qs=mysq,cs=mycs)\n
\n
Notice that the order does not matter when one explicitly defines the parameters.\n
\section SAVE SAVE
Creates a save file of your GS for you to use later with a NEW command. The syntax is as follows:\n
\n
     call Save(cs,file='a_harmonicbath_file')\n
\n
The title of the file is of course your choice but often it is useful to have some information of the derived type somewhere in the title. You can use this saved file to create copies of your GS. This application by convention appends a type name suffix to all automatically generated save files. Automatically gernerated files are used by the application for bookeeping. For example, if you title your GS 'myGS' and NEW it (instantiate, or create it in other words) as type='harmonicbath', then when you call SAVE(myGS,file='my_save_file') you will not only generate your save file 'my_save_file' but also the program will create a file titled 'my_save_file.harmonicbath'. What is happening here is that your save file 'my_save_file' is mearly a file that tells the NEW command that you want to build a generic classical subsystem of type 'harmonicbath' and points the program to a set of internal files that actually hold all the relevant information. The idea is that the casual user doesn't need to concern themselves with all those gory details but a more advanced user may wish to pick and pull from these internal save files to create some new derived type or more likely to satisfy some deep rooted masochistic tendancy either way we really don't need to get into that here. It does however bring us to our next point.\n
\section KILL KILL
Destroys the GS and cleans up any memory allocated. Typically the user will want to KILL the GS once they are done using it with the following syntax:\n
\n
      call Kill(GS)\n
\n
No big whoop there, nevertheless, it is neccessary. Actually... This command isn't strictly necessary as NEWing the GS again will (try it's best to) clean up as much of the memory as it can. However, as a good practice regularly KILLing any unused GS will help prevent memory leaks and/or free up memory that could otherwise be used by the program to do other things.\n
\section UPDATE UPDATE
Causes the GS to recompute various internal properties such as the classical force field or adiabatic eigen states based on dynamic things such as the current nuclear configuration. Usage:\n
\n
       call Update(GS) \n
\section RESAMPLE RESAMPLE
Causes the GS to re-initiate itself often resetting any stochastic properties such as sampling nuclear phase-space variables from a thermal distribution. Usage:\n
\n
       call Resample(GS)\n
\section DISPLAY DISPLAY
Outputs (often directly to screen) the current state of the GS. Usage:\n
\n
	call Display(GS)\n
\section CHECK CHECK
This command is used to ensure that the current state of the GS is within an acceptable range of values. The CHECK command systematically reviews all of the GS attributes and will WARN of the first, if any, problem it encounters. CHECK is not a subroutine that must be CALLed like the previous commands. Rather, CHECK is a function that returns the integer 0 if no problem is found or 1 if a problem is found. The CHECK function will also log a warning message describing the type of problem, if any, found. Usage:\n
\n
      an_integer_variable = Check(GS)\n
      			  or\n
      if(Check(GS).EQ.0)then\n
         \t commands to do when no errors...\n
      else\n
         \t commands to do when errors present... \n
      end if\n
\n
\section Error_Handling Error Handling
NonAdMD logs 4 types of information during run time they are: notes, warnings, errors, and prompts. The User can set a verbosity level to suppress some or all of this run time information. More on that later but first lest look at these 4 types.\n
\subsection NOTES NOTES
Notes are essentially run time comments usually displayed for debugging purposes. They typically do not announce a runtime problem that may possibly effect the quality of the calculation.\n
\subsection WARNINGS WARNINGS
Warnings, on the other hand, do announce possible problems with the calculation quality. WARNINGS typically do not stop the program, unless dictated by the User, rather WARNINGS recover from run time issues as best they can (better said as best the Developer can). Usually the Developer will state how the program will recover from the WARNING when recovery is possible.\n
\subsection ERRORS ERRORS
Errors are irrecoverable run time issues and will stop the program. The Developer may suggest things the User can do to avoid the ERROR in the error message - but probably didn't.\n
\subsection PROMPT PROMPT
Prompts are the 4th type of message, and should be rarely used. They were originally created to comunicate very important information to the user back when this application, ahem, \a was unstable. As a result PROMPTs always report, they cannot be turned off and will report both to the errorlog and to the screen. You can see how easily this function can be abused.\n
\section ERRORLOG Error Log and Verbosity Level
Where are these runtime messages recoreded anyway? Glad you asked! ERRORS, WARNINGS, NOTES and PROMPTS are recorded by default in an output file titled 'runtime.log' with a default verbosity setting Level=1. The User can change the output file and verbosity setting using the 'setupLog' command like so\n
\n
    call setupLog(file=filename,level=[0:4]).\n
\n
The verbosity level affects which type of messages will get recorded in the log file and also which type of messages will stop the program. Recall that PROMPTS are always recorded. Use the table below to figure out which verbosity level is best for you.\n
\n
\verbatim
|=============================================================|
|         V E R B O S I T Y   L E V E L   E F F E C T S       |
|=============================================================|
||       ||     ERRORS    ||     WARNINGS  ||      NOTES     ||
|| Level || RECORD | STOP || RECORD | STOP || RECORD | STOP  ||
||-------||--------|------||--------|------||--------|-------||
||   0   ||   *    |  *   ||        |      ||        |       ||
||   1   ||   *    |  *   ||   *    |      ||        |       ||
||   2   ||   *    |  *   ||   *    |      ||   *    |       ||
||   3   ||   *    |  *   ||   *    |  *   ||   *    |       ||
||   4   ||   *    |  *   ||   *    |  *   ||   *    |   *   ||
|=============================================================|
\endverbatim
For example, setting Level=2 will cause the program to record all notes, warnings and errors, while only errors will stop the program.\n
\section Propagators Propagators
This NonAdMD distribution comes standard with a PLDM propagator class. Future distribution will offer a more comprehensive suite of Density matrix propagation methods including but not limited to: LDM [1,2], ILDM [3], and PLDM [4].\n
\n
LDM (Linearized Density Matrix), ILDM (Iterative LDM) and PLDM (Partial LDM) propagation methods all compute elements of the reduced density matrix as described in [1,2,3,4]. Operationally, they are all used in the same way so we will simply refer to these methods as the 'propagator'. By default the propagator will return the final state of the density matrix stored as an attribute of the quantum subsystem primitive. Optionally, a time history of the reduced density matrix can be saved to a file. The user must first initiate the propagator by NEWing it like so:\n
\n
    call New(prop,qs,cs,cp)\n
\n
where 'prop' is the name of the propagator and  qs, cs, and cp are generic subsystems. Notice the total Hamiltonian in the form of 3 generic subsystems are necessary here. The propagator can also be NEWed from a previous save file analogously to the way the coupling GS was:\n
\n
    call New(prop,qs,cs,cp,file='prop_savefile')\n
or in any order by explicity passing the parameters like in the case of the coupling GS.\n
KILL, DISPLAY, and SAVE - these commands behave just like they did for the GSs i.e.\n
\n
    call Kill(prop)\n
    call Display(prop)\n
    call Save(prop)\n
\n
\subsection RUN RUN
This command is unique to the propagator and is used to execute the propagation scheme on the Hamiltonian. The propagation is executed like so:\n
\n
    call Run(prop,qs,cs,cp,[file='matrix.out'])\n
\n
Here 'matrix.out' is the name of a file to store the time history of the reduced density matrix (square brackets indicate optional parameter). These propagators will update the qs density matrix at the completion of the RUN to the evolved density matrix so only the latest snapshot of the density matrix is stored in qs. The output file is used to store the whole time history\n
\n
1. LAND-map, a linearized approach to nonadiabatic dynamics using the mapping formalism, S. Bonnella and D. F. Coker, J. Chem. Phys. 122, 194102 (2005)\n
2. Linearized path integral approach for calculating nonadiabatic time correlation functions, S. Bonella, D. Montemayor, and D. F. Coker, PNAS, 102, 19, 6715 (2005)\n
3. Iterative linearized approach to nonadiabatic dynamics, E.R. Dunkel, S. Bonella, and D. F. Coker, J. Chem. Phys. 129, 114106 (2008)\n
4. A linearized classical mapping Hamiltonian path integral approach for density matrix dynamics: Coherent excitation energy transfer and equilibration in general dissipative models of light harvesting complexes, P. Huo and D. F. Coker, Phys. Rev. Lett. (submitted June 2011)\n
\n
\section Observables Observables
In addition, this distribution offers a diagnostic tool in the form of a spectrometer. The spectrometer is a work in progress of course, but in its current form it offers the user a way to compute the absorption spectrum of the generic quantum subsystem or the total 3-part Hamiltonian. The absorption spectrum (ABspec) is a special kind of object with only one command OBSERVE. OBSERVEing the ABspec will return a spectrum stored as an attribute of ABspec. Optionally, the result absorption spectrum can be saved to a file for later analysis. Usage:\n
\n
   call Observe(ABspec,qs,[cs],[cp],Emin,Emax,[N],[tol],[samples],[file='ABspec.out'])\n
\n
where 'qs', 'cs', and 'cp' are the GSs; 'Emin' and 'Emax' are real numbers determining the energy domain over which the spectrum is observed; 'N' is the number of discrete spectral points the spectrum will compute; the integer 'samples' determines the maximum number of times the spectrometer will RESAMPLE the GSs before exiting should the spectrum have trouble converging; 'tol' is the greatest root mean squared deviation between subsequent RESAMPLEs allowed before the spectrum is considered converged; and 'ABspec.out' is name of the output file (square brackets indicate optional parameters). Keep in mind that the spectrometer is still being hashed out so to speak and subsequent versions may differ greatly and will likely not be backwards compatable.\n
\section Global_Methods_Chart Global Methods Chart
\verbatim
|=================================================================================|
|                           G L O B A L   M E T H O D S                           |
|=================================================================================|
| OBJ || NEW | KILL | UPDATE | DISPLAY | SAVE | CHECK | RESAMPLE | RUN | OBSERVE ||
|-----||-----|------|--------|---------|------|-------|----------|-----|---------||
| qs  ||  *  |  *   |   *    |   *     |  *   |   *   |    *     |     |         ||
| cs  ||  *  |  *   |   *    |   *     |  *   |   *   |    *     |     |         ||
| cp  ||  *  |  *   |   *    |   *     |  *   |   *   |    *     |     |         ||
| prop||  *  |  *   |        |   *     |  *   |   *   |          |  *  |         ||
| spec||     |      |        |         |      |       |          |     |    *    ||
|=================================================================================|
\endverbatim
*/
